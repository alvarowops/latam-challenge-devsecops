name: CI/CD Pipeline for Cloud Run Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Google Artifact Registry
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" | docker login -u _json_key --password-stdin https://us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform linux/amd64 -t us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/latam-devsecops-images/data-api:$IMAGE_TAG -f Flask-api/Dockerfile --push Flask-api

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate with Google Cloud
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" | gcloud auth activate-service-account --key-file=-
          gcloud auth list
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          gcloud run deploy data-api \
            --image us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/latam-devsecops-images/data-api:$IMAGE_TAG \
            --region us-east4 \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          CLOUD_RUN_URL=$(gcloud run services describe data-api --region us-east4 --format 'value(status.url)')
          echo "CLOUD_RUN_URL=$CLOUD_RUN_URL" >> $GITHUB_ENV

      - name: Run Integration Test
        env:
          CLOUD_RUN_URL: ${{ env.CLOUD_RUN_URL }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$CLOUD_RUN_URL/data")
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Integration test failed: API did not return HTTP 200"
            exit 1
          fi
          echo "Integration test passed: API returned HTTP 200"

      - name: Run Functional Test for Data Integrity
        env:
          CLOUD_RUN_URL: ${{ env.CLOUD_RUN_URL }}
        run: |
          RESPONSE=$(curl -s "$CLOUD_RUN_URL/data")
          if [[ "$RESPONSE" != *"id\":123"* ]]; then
            echo "Functional test failed: Expected data not found in response"
            exit 1
          fi
          echo "Functional test passed: Expected data found in response"
